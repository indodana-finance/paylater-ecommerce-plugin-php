name: Release

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'Opencart*'
      - 'Woocommerce*'
      - 'Magento*'
      - 'Prestashop*'

jobs:

  release:
    name: Release

    runs-on: ${{ matrix.operating-systems }}

    strategy:
      fail-fast: false
      matrix:
        operating-systems:
          - ubuntu-latest

    steps:
      - name: Checkout the project
        uses: actions/checkout@v2

      # Use semantic versioning. Example output: 1.0.0
      - name: Get package version
        id: packageVersion
        uses: olegtarasov/get-tag@v2.1
        with:
          tagRegex: "^(OpencartV1|OpencartV2|OpencartV2.3|WoocommerceV3|WoocommerceV4|MagentoV1|PrestashopV1|MagentoV2)-(.*)"
          tagRegexGroup: 2

      # We differentiate plugin release based on prefix
      # Different plugin will set different environment variables to be reused on steps hereafter
      - name: Prepare release for OpencartV1
        if: startsWith(github.ref, 'refs/tags/OpencartV1-')
        run: |
          PACKAGE_VERSION=${{ steps.packageVersion.outputs.tag }}
          echo 'extensions=curl, json, mbstring, xdebug' >> $GITHUB_ENV
          echo "release-name=opencart_v1-${PACKAGE_VERSION//\./_}" >> $GITHUB_ENV
          echo 'php-versions=5.6' >> $GITHUB_ENV
          echo 'key=cache-opencartv1-v2' >> $GITHUB_ENV
          echo 'source-directory=opencartv1' >> $GITHUB_ENV
          echo 'target-directory=.build/opencartv1' >> $GITHUB_ENV
          echo 'build-command=make opencartv1-build' >> $GITHUB_ENV

      - name: Prepare release for OpencartV2
        if: startsWith(github.ref, 'refs/tags/OpencartV2-')
        run: |
          PACKAGE_VERSION=${{ steps.packageVersion.outputs.tag }}
          echo 'extensions=curl, json, mbstring, xdebug' >> $GITHUB_ENV
          echo "release-name=opencart_v2-${PACKAGE_VERSION//\./_}" >> $GITHUB_ENV
          echo 'php-versions=5.6' >> $GITHUB_ENV
          echo 'key=cache-opencartv2-v2' >> $GITHUB_ENV
          echo 'source-directory=opencartv2' >> $GITHUB_ENV
          echo 'target-directory=.build/opencartv2' >> $GITHUB_ENV
          echo 'build-command=make opencartv2-build' >> $GITHUB_ENV

      - name: Prepare release for OpencartV2.3
        if: startsWith(github.ref, 'refs/tags/OpencartV2.3-')
        run: |
          PACKAGE_VERSION=${{ steps.packageVersion.outputs.tag }}
          echo 'extensions=curl, json, mbstring, xdebug' >> $GITHUB_ENV
          echo "release-name=opencart_v2.3-${PACKAGE_VERSION//\./_}" >> $GITHUB_ENV
          echo 'php-versions=7.2' >> $GITHUB_ENV
          echo 'key=cache-opencartv2.3-v1' >> $GITHUB_ENV
          echo 'source-directory=opencartv2.3' >> $GITHUB_ENV
          echo 'target-directory=.build/opencartv2.3' >> $GITHUB_ENV
          echo 'build-command=make opencartv2.3-build' >> $GITHUB_ENV

      - name: Prepare release for WoocommerceV3
        if: startsWith(github.ref, 'refs/tags/WoocommerceV3-')
        run: |
          PACKAGE_VERSION=${{ steps.packageVersion.outputs.tag }}
          echo 'extensions=curl, json, mbstring, xdebug' >> $GITHUB_ENV
          echo "release-name=woocommerce_v3-${PACKAGE_VERSION//\./_}" >> $GITHUB_ENV
          echo 'php-versions=7.2' >> $GITHUB_ENV
          echo 'key=cache-woocommercev3-v2' >> $GITHUB_ENV
          echo 'source-directory=woocommerce' >> $GITHUB_ENV
          echo 'target-directory=.build/woocommerce' >> $GITHUB_ENV
          echo 'build-command=make woocommerce-build' >> $GITHUB_ENV

      - name: Prepare release for WoocommerceV4
        if: startsWith(github.ref, 'refs/tags/WoocommerceV4-')
        run: |
          PACKAGE_VERSION=${{ steps.packageVersion.outputs.tag }}
          echo 'extensions=curl, json, mbstring, xdebug' >> $GITHUB_ENV
          echo "release-name=woocommerce_v4-${PACKAGE_VERSION//\./_}" >> $GITHUB_ENV
          echo 'php-versions=7.2' >> $GITHUB_ENV
          echo 'key=cache-woocommercev4-v2' >> $GITHUB_ENV
          echo 'source-directory=woocommercev4' >> $GITHUB_ENV
          echo 'target-directory=.build/woocommercev4' >> $GITHUB_ENV
          echo 'build-command=make woocommercev4-build' >> $GITHUB_ENV

      - name: Prepare release for MagentoV1
        if: startsWith(github.ref, 'refs/tags/MagentoV1-')
        run: |
          PACKAGE_VERSION=${{ steps.packageVersion.outputs.tag }}
          echo 'extensions=curl, json, mbstring, xdebug' >> $GITHUB_ENV
          echo "release-name=magento_v1-${PACKAGE_VERSION//\./_}" >> $GITHUB_ENV
          echo 'php-versions=5.6' >> $GITHUB_ENV
          echo 'key=cache-magentov1-v2' >> $GITHUB_ENV
          echo 'source-directory=magento1' >> $GITHUB_ENV
          echo 'target-directory=.build/magento1' >> $GITHUB_ENV
          echo 'build-command=make magento1-build' >> $GITHUB_ENV

      - name: Prepare release for MagentoV2
        if: startsWith(github.ref, 'refs/tags/MagentoV2-')
        run: |
          PACKAGE_VERSION=${{ steps.packageVersion.outputs.tag }}
          echo 'extensions=curl, json, mbstring, xdebug' >> $GITHUB_ENV
          echo "release-name=magento_v2-${PACKAGE_VERSION//\./_}" >> $GITHUB_ENV
          echo 'php-versions=7.3' >> $GITHUB_ENV
          echo 'key=cache-magentov2-v2' >> $GITHUB_ENV
          echo 'source-directory=magentov2' >> $GITHUB_ENV
          echo 'target-directory=.build/magentov2' >> $GITHUB_ENV
          echo 'build-command=make magentov2-build' >> $GITHUB_ENV
          
      - name: Prepare release for PrestashopV1
        if: startsWith(github.ref, 'refs/tags/PrestashopV1-')
        run: |
          PACKAGE_VERSION=${{ steps.packageVersion.outputs.tag }}
          echo 'extensions=curl, json, mbstring, xdebug' >> $GITHUB_ENV
          echo "release-name=prestashop_v1-${PACKAGE_VERSION//\./_}" >> $GITHUB_ENV
          echo 'php-versions=7.2' >> $GITHUB_ENV
          echo 'key=cache-prestashopv1-v2' >> $GITHUB_ENV
          echo 'source-directory=prestashopv1' >> $GITHUB_ENV
          echo 'target-directory=.build/prestashopv1' >> $GITHUB_ENV
          echo 'build-command=make prestashopv1-build' >> $GITHUB_ENV

      # Install & cache environments
      # https://github.com/marketplace/actions/setup-php-action#cache-extensions
      - name: Setup cache environment
        id: cache-env
        uses: shivammathur/cache-extensions@v1
        with:
          php-version: ${{ env.php-versions }}
          extensions: ${{ env.extensions }}
          key: ${{ env.key }}

      - name: Cache extensions
        uses: actions/cache@v1
        with:
          path: ${{ steps.cache-env.outputs.dir }}
          key: ${{ steps.cache-env.outputs.key }}
          restore-keys: ${{ steps.cache-env.outputs.key }}

      - name: Validate plugin composer.json and composer.lock
        working-directory: ${{ env.source-directory }}
        run: composer validate

      - name: Install plugin dependencies
        working-directory: ${{ env.source-directory }}
        run: composer install --prefer-dist --no-progress

      - name: Check plugin dependencies on specific platform
        working-directory: ${{ env.source-directory }}
        run: composer check-platform-reqs

      - name: Build the plugin
        run: ${{ env.build-command }}

      - name: Zip the plugin
        run: |
          cd ${{ env.target-directory }}
          zip -r ${{ env.release-name }}.zip plugin

      - name: Create the release
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ env.target-directory }}/${{ env.release-name }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
